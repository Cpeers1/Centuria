plugins {
    id 'java'
	id 'maven-publish'
}

version = "1.6.2.B1"
group = "org.asf.centuria"

sourceCompatibility = '1.17'
targetCompatibility = '1.17'

def authorname = "AerialWorks Software Foundation"

apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
    mavenCentral()
	maven { name = "AerialWorks"; url = "https://aerialworks.ddns.net/maven" }
    flatDir {
       dirs 'libraries'
   }
}

jar {
	manifest {
		attributes([
			"Main-Class": "org.asf.centuria.launcher.LauncherMain",
			"Specification-Title": "Centuria",
			"Specification-Vendor": "${authorname}",
                        "Specification-Version": project.version,
			"Implementation-Title": project.name,
			"Implementation-Version": project.version,
			"Implementation-Vendor" :"${authorname}",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
	includeEmptyDirs = false
}

task javaDocs(type: Javadoc) {
	classpath = sourceSets.main.runtimeClasspath
	source = sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: 'javaDocs') {
	from javadoc
	classifier = 'javadoc'
	exclude "**/extra/**"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
	exclude "**/extra/**"
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

dependencies {
	implementation name: "ConnectiveHTTP"
	implementation name: "RatsMemory"
	implementation name: "HttpBasicFileModule"
	
	implementation group: 'org.asf.cyan', name: 'CyanComponents', version: '1.0.0.A8'
	implementation group: 'org.asf.cyan', name: 'CyanUtil', version: '1.0.0.A19'
	implementation group: 'org.asf.cyan', name: 'CCFG', version: '1.0.0.A17'
	implementation group: 'org.asf.cyan', name: 'Fluid', version: '1.0.0.A27'
	
	implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.0'
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.17.0'
	
	implementation 'org.ow2.asm:asm:9.1'
	implementation 'org.ow2.asm:asm-tree:9.1'
	implementation 'org.ow2.asm:asm-commons:9.1'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.0'
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.13.3'
	
	implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
	
	implementation group: 'org.asf.aos.util.service', name: 'aosutil-service-SLIB-UTIL', version: '0.0.0.12'
	implementation group: 'org.apache.commons', name: 'commons-compress', version: '1.21'	
	implementation group: 'org.tukaani', name: 'xz', version: '1.9'
	implementation group: 'org.joml', name: 'joml', version: '1.10.4'
	
	implementation group: 'org.reflections', name: 'reflections', version: '0.10.2'
	testImplementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.36'
	
	implementation group: 'net.objecthunter', name: 'exp4j', version: '0.4.8'
}

project.configurations.implementation.canBeResolved = true

task installation () {
	doLast {
		copy {
			from "centuria"
			from "centuria.bat"
			into "build/Installations"
		}
		for (ResolvedArtifact arti : project.configurations.implementation.resolvedConfiguration.getResolvedArtifacts()) {
			if (arti.getClassifier() != null)
				continue;
			copy {
				from arti.file
				rename arti.file.getName(), arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "") + "." + arti.getExtension()
				into "build/Installations/libs"
			}
		}
		for (def task : project.tasks) {
			if (task instanceof AbstractArchiveTask) {
				if (!task.getArchiveClassifier().get().isEmpty())
					continue;
					
				copy {
					from task.getArchiveFile().get()
					rename task.getArchiveFile().get().getAsFile().getName(), task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get()
					into "build/Installations"
				}
			}
		}
	}
}

installation.dependsOn project.tasks.build
build.finalizedBy installation

import java.nio.file.*
task updateData () {
	doLast {
		copy {
			from "centuria"
			from "centuria.bat"
			into "build/update"
		}
		String data = ""
		for (ResolvedArtifact arti : project.configurations.implementation.resolvedConfiguration.getResolvedArtifacts()) {
			if (arti.getClassifier() != null)
				continue;
			copy {
				from arti.file
				rename arti.file.getName(), arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "") + "." + arti.getExtension()
				into "build/update/libs"
				data += "libs/" + arti.name + (arti.getClassifier() != null && !arti.getClassifier().isEmpty() ? "-" + arti.getClassifier() : "") + "." + arti.getExtension() + "\n"
			}
		}
		for (def task : project.tasks) {
			if (task instanceof AbstractArchiveTask) {
				if (!task.getArchiveClassifier().get().isEmpty())
					continue;
					
				copy {
					from task.getArchiveFile().get()
					rename task.getArchiveFile().get().getAsFile().getName(), task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get()
					into "build/update"
					data += task.getArchiveBaseName().get() + (task.getArchiveClassifier().get() != null && !task.getArchiveClassifier().get().isEmpty() ? "-" + task.getArchiveClassifier().get() : "") + "." + task.getArchiveExtension().get() + "\n"
				}
			}
		}
		Files.writeString(file("build/update/update.list").toPath(), data)
	}
}

updateData.dependsOn project.tasks.build
build.finalizedBy updateData
